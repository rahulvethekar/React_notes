--> React Js :- It is an open-source , cross-platform Javascipt library used to devlop User Interfaces (UI) (Front-End)
  -> View Layer of the application 
  -> It is used to develop SPA (Single Page Application)
  -> It is maintained by Facebook.
  -> With the help of React Js we can develop web application and with the help of React Native we can develop mobile apps.
  --> pre-request :- Good knowleage of Javascipt (Es 6) features 
     let , const , template literals , spread operator , rest parameter , map , filter , reduce , destructuring , class , inheritance , generators and iterators , callback , promise and async/await 
  --> Features of react js 
      -> Component based architecture 
      -> Virtual DOM (performance is fast)
      -> JSX Features :- we can write html code within Javascipt code.
  --> Environmental Setup 
       -> We need a node js environment 
          node version >14.0 
          https://nodejs.org/en/download/ (downlaod and install)
          -> to check node is install or not 
            -> open cmd or terminal 
              node -v 
              npm :- node package manager (we can download all node packages with the help of npm)
       -> How we create react app 
           npx create-react-app demo 
       -> How we run react app 
          cd demo 
          npm start (open in default browser in port 3000)
    ->   FOlder Structure | Directory structure 
       -> node_modules :- It is a folder where all the 3rd party modules are define
       -> public :- where we can store our assets files (css,js,images,fonts)etc and in this folder there is a index.html file , the main html file which execute when a app is server.
       -> package.json :- all node module dependencies are define there and also define the setting of the application.
       -> package-lock.json :- dependencies with their versions are define 
       -> README.md :- all the project details are define 
       -> ** src :- main folder 
           -> index.js : main Javascipt entry point file .When app is executed the index.js file get the id root from index.html and load App component in that id.
           -> App.js :- It is a default component which is render when a react application is execute 
      -> How react application is boot (execute)
         index.html 
         <div id="root"></div>
          ---> call/boot --> src/index.js (main Javascipt entry point file)---> it get id root from index.html and load the App component (default component) in that id root div.
      -> Dynamic Data Binding 
         expression :- { }
      -> if we want to render array or object we have map() function


      --> Components :- are the core building blocks of react app. It is used for reusability. Every component have their own logic and design.
         -> Types of Components 
            -> Class Component 
            -> Function Component
            -> Class Component :- in this we can manage the states.
               -> How we create a class component 
                  component name is start with capital letter 
                  eg:
               Myclass.js 
               import React,{Component} from 'react';
               class Myclass extends Component {
                   //logics there 
                   render(){
                      return(<>
                        <h2> Myclass Component </h2>
                      </>)
                   }
               }
               export default Myclass;
               -> How we reuse component 
               import Myclass from './Myclass';
               <Myclass />
               ** in class component if we want to access any variables we use this keyword.
            -> Vs code extension of react
            ES7+ React/Redux/React-Native

            -> props (properties) :- props are used to pass data from parent component to child component. (read only - immutable)
              App.js 
                 title="My class Component";
                <Myclass mytitle={title}/>
                -> How we read props in class component 
                  this.props.proname 
                  {this.props.mytitle}
            -> states :- are used to manage data within a component. states are mutable (we change)
            //define state 
                constructor(props){
                    super(props);
                    this.state={count:0}
                }
            // read state 
            {this.state.count}
            // update state 
              this.setState({count:this.state.count+1})
              ** when a state data is update it automatically updated in dom
     

      
    